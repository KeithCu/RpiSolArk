#!/usr/bin/env python3
"""
Test script for Sol-Ark inverter automation.
This script implements the actual automation based on the HTML analysis.
"""

import asyncio
import yaml
from solark_cloud import SolArkCloud

async def take_debug_screenshot(solark, filename_prefix, reason="debug"):
    """Take a screenshot for debugging purposes"""
    try:
        screenshot_file = f"{filename_prefix}.png"
        await solark.page.screenshot(path=screenshot_file)
        print(f"üì∏ Screenshot saved: {screenshot_file} ({reason})")
        return screenshot_file
    except Exception as e:
        print(f"‚ùå Failed to take screenshot: {e}")
        return None

async def download_debug_html(solark, filename_prefix, reason="debug"):
    """Download HTML content for debugging purposes"""
    try:
        html_content = await solark.page.content()
        html_file = f"{filename_prefix}.html"
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"üì• HTML saved: {html_file} ({reason})")
        return html_file
    except Exception as e:
        print(f"‚ùå Failed to download HTML: {e}")
        return None

async def debug_page_state(solark, stage_name, reason="debug"):
    """Take screenshot and download HTML at any stage for debugging"""
    print(f"\nüîç Debug: {stage_name} - {reason}")
    await take_debug_screenshot(solark, f"debug_{stage_name}", reason)
    await download_debug_html(solark, f"debug_{stage_name}", reason)

async def debug_on_error(solark, error_context, error_message):
    """Take debug screenshots and HTML when an error occurs"""
    print(f"\nüö® Error Debug: {error_context}")
    print(f"   Error: {error_message}")
    await take_debug_screenshot(solark, f"error_{error_context}", f"Error: {error_message}")
    await download_debug_html(solark, f"error_{error_context}", f"Error: {error_message}")

# Debug Strategy:
# - Only take screenshots/HTML when there's an issue
# - Use debug_on_error() for failures to capture the problematic state
# - Use debug_page_state() for manual debugging when needed
# - No automatic success screenshots - only when manually requested
#
# Manual debugging examples:
#   await debug_page_state(solark, "after_login", "Manual debug")
#   await debug_page_state(solark, "parameters_page", "Manual debug")

async def test_inverter_automation():
    """Test the complete inverter automation flow."""
    
    print("üöÄ Starting Sol-Ark Inverter Automation Test")
    print("=" * 50)
    
    # Load configuration
    try:
        with open('config.yaml', 'r') as f:
            config = yaml.safe_load(f)
    except Exception as e:
        print(f"‚ùå Failed to load config.yaml: {e}")
        return False
    
    # Get inverter ID from primary optocoupler
    inverter_id = None
    if 'hardware' in config and 'optocoupler' in config['hardware'] and 'primary' in config['hardware']['optocoupler']:
        inverter_id = config['hardware']['optocoupler']['primary'].get('solark_inverter_id')
        if inverter_id:
            print(f"‚úÖ Found inverter ID: {inverter_id}")
        else:
            print("‚ùå No inverter ID configured for primary optocoupler")
            return False
    else:
        print("‚ùå No optocoupler configuration found")
        return False
    
    # Initialize Sol-Ark Cloud
    print("\nüåê Initializing Sol-Ark Cloud...")
    solark = SolArkCloud('config.yaml')
    
    try:
        # Initialize browser
        await solark.initialize()
        print("‚úÖ Browser initialized")
        
        # Login
        print("\nüîê Logging in...")
        if await solark.login():
            print("‚úÖ Login successful")
        else:
            print("‚ùå Login failed")
            await debug_on_error(solark, "login_failed", "Login attempt failed")
            return False
        
        # Navigate to inverter device page
        print(f"\nüìã Navigating to inverter device page...")
        inverter_url = f"{solark.base_url}/device/inverter"
        await solark.page.goto(inverter_url)
        await solark.page.wait_for_load_state('networkidle')
        await asyncio.sleep(3)  # Wait for JavaScript to render
        
        print("‚úÖ Successfully navigated to inverter device page")
        
        # Find the specific inverter row by SN
        print(f"\nüîç Looking for inverter {inverter_id}...")
        
        # Wait for the table to load
        await solark.page.wait_for_selector('.el-table__body', timeout=10000)
        
        # Find the inverter row by looking for the SN in the table
        inverter_row = None
        try:
            # Look for the specific inverter SN in the table
            sn_selector = f"text={inverter_id}"
            await solark.page.wait_for_selector(sn_selector, timeout=10000)
            
            # Find the row containing this SN
            inverter_row = await solark.page.query_selector(f"tr:has-text('{inverter_id}')")
            if inverter_row:
                print(f"‚úÖ Found inverter row for {inverter_id}")
            else:
                print(f"‚ùå Could not find inverter row for {inverter_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error finding inverter row: {e}")
            return False
        
        # Click on the "More" dropdown button for this inverter
        print(f"\nüìã Clicking on 'More' dropdown for inverter {inverter_id}...")
        
        try:
            # First, scroll the table to make sure the dropdown column is visible
            print("   Scrolling table to ensure dropdown is visible...")
            await solark.page.evaluate("document.querySelector('.el-table__body-wrapper').scrollLeft = 1000")
            await asyncio.sleep(1)
            
            # Find dropdown button in the specific inverter row
            dropdown_button = None
            try:
                # Look for dropdowns in rows that contain our inverter ID
                inverter_rows = await solark.page.query_selector_all(f'tr:has-text("{inverter_id}")')
                print(f"   Found {len(inverter_rows)} rows containing inverter {inverter_id}")
                
                for i, row in enumerate(inverter_rows):
                    # Check if this row actually contains our inverter ID
                    row_text = await row.text_content()
                    if inverter_id in row_text:
                        print(f"   Row {i+1} contains inverter {inverter_id}")
                        # Look for dropdown in this specific row
                        dropdown_in_row = await row.query_selector('.w24.h30.flex-align-around.el-dropdown-selfdefine')
                        if dropdown_in_row and await dropdown_in_row.is_visible():
                            dropdown_button = dropdown_in_row
                            print(f"   Found dropdown in row {i+1}")
                            break
            except Exception as e:
                print(f"   Error finding dropdown in specific row: {e}")
            
            if dropdown_button:
                # Ensure the button is in view
                await dropdown_button.scroll_into_view_if_needed()
                await asyncio.sleep(0.5)
                
                # Click the dropdown
                await dropdown_button.click()
                print("‚úÖ Clicked on 'More' dropdown")
                await asyncio.sleep(2)  # Wait for dropdown to appear
            else:
                print("‚ùå Could not find 'More' dropdown button with any selector")
                await debug_on_error(solark, "dropdown_not_found", f"Could not find dropdown for inverter {inverter_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error clicking dropdown: {e}")
            await debug_on_error(solark, "dropdown_click_error", str(e))
            return False
        
        # Click on "Parameters Setting" in the dropdown
        print(f"\n‚öôÔ∏è Clicking on 'Parameters Setting'...")
        
        try:
            # Wait for the dropdown menu to appear and be visible
            print("   Waiting for dropdown menu to appear...")
            
            # Wait a bit for the menu to appear
            await asyncio.sleep(2)
            
            # Check for dropdown menus
            try:
                all_menus = await solark.page.query_selector_all('.el-dropdown-menu')
                print(f"   Found {len(all_menus)} dropdown menus on page")
                
                visible_menu = None
                for i, menu in enumerate(all_menus):
                    try:
                        is_visible = await menu.is_visible()
                        classes = await menu.get_attribute('class')
                        print(f"     Menu {i+1}: visible={is_visible}, class='{classes}'")
                        if is_visible and not visible_menu:
                            visible_menu = menu
                    except:
                        print(f"     Menu {i+1}: Could not get details")
                
                if visible_menu:
                    print("   ‚úÖ Found visible dropdown menu!")
                else:
                    print("   ‚ö†Ô∏è No visible dropdown menu found, waiting more...")
                    await asyncio.sleep(3)
                    # Try again
                    all_menus = await solark.page.query_selector_all('.el-dropdown-menu')
                    for menu in all_menus:
                        if await menu.is_visible():
                            visible_menu = menu
                            print("   ‚úÖ Found visible dropdown menu on retry!")
                            break
                    
            except Exception as e:
                print(f"   Error checking dropdown menus: {e}")
                return False
            
            # Use keyboard navigation - much more reliable than DOM clicking
            
            # Wait for the menu to be fully interactive
            print("   Waiting for menu to be fully interactive...")
            await asyncio.sleep(2)
            
            # Use keyboard navigation - much more reliable!
            try:
                print("   Using keyboard navigation to select 'Parameters Setting'...")
                
                # First arrow down to wake up the menu and highlight first item
                print("   Pressing ‚Üì to wake up menu...")
                await solark.page.keyboard.press('ArrowDown')
                await asyncio.sleep(0.5)
                
                # Second arrow down to go to Parameters Setting
                print("   Pressing ‚Üì once more to reach Parameters Setting...")
                await solark.page.keyboard.press('ArrowDown')
                await asyncio.sleep(0.5)
                
                # Press Enter to select Parameters Setting
                print("   Pressing Enter to select Parameters Setting...")
                await solark.page.keyboard.press('Enter')
                print("‚úÖ Successfully navigated to 'Parameters Setting' using keyboard!")
                await asyncio.sleep(3)
                
            except Exception as e:
                print(f"   Keyboard navigation failed: {e}")
                
                # Fallback: Manual intervention
                print("   Automated navigation failed. Please click 'Parameters Setting' manually...")
                print("   Waiting 15 seconds for manual click...")
                await asyncio.sleep(15)
                print("   Assuming manual click completed, continuing...")
                
        except Exception as e:
            print(f"‚ùå Error clicking Parameters Setting: {e}")
            await debug_on_error(solark, "parameters_setting_error", str(e))
            return False
        
        print(f"\nüéØ Successfully navigated to parameters page for inverter {inverter_id}")
        
        # Now test the complete TOU automation flow
        print("\nüîÑ Testing complete TOU automation flow...")
        
        # Wait for the parameters page to fully load
        await solark.page.wait_for_load_state('networkidle')
        await asyncio.sleep(2)
        
        # Look for TOU-related elements
        print("üîç Looking for Time of Use settings...")
        tou_selectors = [
            'text=Time of Use',
            'text=TOU',
            'text=ÂàÜÊó∂Áîµ‰ª∑',  # Chinese for Time of Use
            'text=Â≥∞Ë∞∑Áîµ‰ª∑',  # Chinese for Peak-Valley pricing
            '[placeholder*="TOU"]',
            '[placeholder*="Time of Use"]',
            'input[type="checkbox"]:near(text=Time of Use)',
            'input[type="checkbox"]:near(text=TOU)',
            '.el-checkbox:has-text("Time of Use")',
            '.el-checkbox:has-text("TOU")',
            '.el-checkbox:has-text("ÂàÜÊó∂Áîµ‰ª∑")',
            '.el-checkbox:has-text("Â≥∞Ë∞∑Áîµ‰ª∑")'
        ]
        
        tou_element = None
        for selector in tou_selectors:
            try:
                tou_element = await solark.page.query_selector(selector)
                if tou_element and await tou_element.is_visible():
                    print(f"‚úÖ Found TOU element with selector: {selector}")
                    break
            except:
                continue
        
        if tou_element:
            # Check if it's a checkbox
            tag_name = await tou_element.evaluate('el => el.tagName.toLowerCase()')
            if tag_name == 'input' and await tou_element.get_attribute('type') == 'checkbox':
                # It's a checkbox - check current state
                is_checked = await tou_element.is_checked()
                print(f"üìã TOU checkbox current state: {'checked' if is_checked else 'unchecked'}")
                
                # Test toggle (we'll toggle it and then toggle it back)
                print("üîÑ Testing TOU toggle...")
                await tou_element.click()
                await asyncio.sleep(1)
                
                new_state = await tou_element.is_checked()
                print(f"üìã TOU checkbox new state: {'checked' if new_state else 'unchecked'}")
                
                # Toggle it back to original state
                if new_state != is_checked:
                    print("üîÑ Toggling back to original state...")
                    await tou_element.click()
                    await asyncio.sleep(1)
                    final_state = await tou_element.is_checked()
                    print(f"üìã TOU checkbox final state: {'checked' if final_state else 'unchecked'}")
                    
                    if final_state == is_checked:
                        print("‚úÖ TOU toggle test successful!")
                    else:
                        print("‚ùå TOU toggle test failed - state not restored")
                else:
                    print("‚ùå TOU toggle test failed - state did not change")
            else:
                # It might be a button or other element - try clicking
                print("üîÑ TOU element is not a checkbox, attempting to click")
                await tou_element.click()
                await asyncio.sleep(1)
                print("‚úÖ Clicked TOU element")
            
            # Look for save button
            print("üîç Looking for save button...")
            save_selectors = [
                'button:has-text("Save")',
                'button:has-text("‰øùÂ≠ò")',
                'button:has-text("Apply")',
                'button:has-text("Â∫îÁî®")',
                '.el-button--primary:has-text("Save")',
                '.el-button--primary:has-text("‰øùÂ≠ò")',
                'input[type="submit"]',
                '.el-button[type="submit"]'
            ]
            
            save_button = None
            for selector in save_selectors:
                try:
                    save_button = await solark.page.query_selector(selector)
                    if save_button and await save_button.is_visible():
                        print(f"‚úÖ Found save button with selector: {selector}")
                        break
                except:
                    continue
            
            if save_button:
                print("‚úÖ Save button found - TOU automation is ready!")
                print("üìã Complete TOU automation flow:")
                print("   1. ‚úÖ Login to Sol-Ark")
                print("   2. ‚úÖ Navigate to inverter device page")
                print("   3. ‚úÖ Find specific inverter by ID")
                print("   4. ‚úÖ Click dropdown menu")
                print("   5. ‚úÖ Click Parameters Setting")
                print("   6. ‚úÖ Find TOU checkbox")
                print("   7. ‚úÖ Toggle TOU checkbox")
                print("   8. ‚úÖ Find save button")
                print("   9. üîÑ Ready to save changes")
            else:
                print("‚ö†Ô∏è  Save button not found - TOU automation may need adjustment")
                print("   Available buttons on page:")
                try:
                    buttons = await solark.page.query_selector_all('button')
                    for i, button in enumerate(buttons):
                        text = await button.text_content()
                        if text and text.strip():
                            print(f"     {i+1}. {text.strip()}")
                except:
                    print("     Could not retrieve button text")
        else:
            print("‚ùå Could not find Time of Use settings on parameters page")
            print("   Available text elements on page:")
            try:
                # Look for any text that might be related to TOU
                all_text = await solark.page.evaluate("""
                    () => {
                        const walker = document.createTreeWalker(
                            document.body,
                            NodeFilter.SHOW_TEXT,
                            null,
                            false
                        );
                        const texts = [];
                        let node;
                        while (node = walker.nextNode()) {
                            if (node.textContent.trim().length > 0) {
                                texts.push(node.textContent.trim());
                            }
                        }
                        return texts.slice(0, 20); // First 20 text elements
                    }
                """)
                for i, text in enumerate(all_text):
                    print(f"     {i+1}. {text}")
            except:
                print("     Could not retrieve page text")
        
        print("\nüìã Next steps:")
        print("   1. ‚úÖ Analyze the parameters page HTML to find Time of Use settings")
        print("   2. ‚úÖ Implement the TOU checkbox selector")
        print("   3. ‚úÖ Implement save functionality")
        print("   4. ‚úÖ Test the complete TOU toggle flow")
        print("   5. üîÑ Ready for production integration!")
        
        # Keep browser open for manual exploration
        print(f"\nüåê Browser is open for manual exploration...")
        print("   Press Ctrl+C to close when done")
        
        try:
            # Keep the script running so you can explore manually
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            print("\nüëã Closing browser...")
        
    except Exception as e:
        print(f"‚ùå Error during automation: {e}")
        if 'solark' in locals():
            await debug_on_error(solark, "automation_failed", str(e))
        return False
    finally:
        await solark.cleanup()
    
    return True

if __name__ == "__main__":
    asyncio.run(test_inverter_automation())
